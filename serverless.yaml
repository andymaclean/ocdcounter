service: dynamocount
frameworkVersion: '3'

provider:
  name: aws
  runtime: provided.al2
  architecture: x86_64
  memorySize: 128
  timeout: 10
  httpApi:
    payload: "2.0"
    authorizers:
      APIAUTH:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt UserPool.ProviderURL
        audience:
          - Ref: UserPoolClient
  environment:
    COUNTER_TABLE: 
      Ref: counterTable
    GROUP_TABLE: 
      Ref: groupTable
    USER_TABLE: 
      Ref: userTable
    USER_POOL:
      Ref: UserPool
    USER_POOL_CLIENT:
      Ref: UserPoolClient
  iam:
    role:
      name:  counterTableRWAccess
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:Scan'
            - 'dynamodb:Query'
            - 'dynamodb:DeleteItem'
          Resource: 
            - !GetAtt counterTable.Arn
            - !GetAtt groupTable.Arn
            - !GetAtt userTable.Arn
            - Fn::Join:
              - 
              - - !GetAtt userTable.Arn
                - /index/emailLookup
        - Effect: Allow
          Action:
            - 'cognito-idp:AdminCreateUser'
            - 'cognito-idp:AdminInitiateAuth'
            - 'cognito-idp:AdminSetUserPassword'
          Resource: !GetAtt UserPool.Arn


package:
  patterns:
    - '!*'
    - 'bootstrap'

functions:
  apipublic:
    handler: apipublic
    events:
      - httpApi:
          method: GET
          path: /signup

      - httpApi:
          method: GET
          path: /login

  apiprivate:
    handler: apiprivate
    events:   
      - httpApi:
          method: GET
          path: /loop
          authorizer: APIAUTH

      - httpApi:
          method: GET
          path: /loopua

      - httpApi:
          method: 'GET'
          path: /api/v1/group
          authorizer: APIAUTH

      - httpApi:
          method: 'POST'
          path: /api/v1/group/{name}
          authorizer: APIAUTH

      - httpApi:
          method: 'DELETE'
          path: /api/v1/group/{id}
          authorizer: APIAUTH

      - httpApi:
          method: 'GET'
          path: /api/v1/group/{group}/counter
          authorizer: APIAUTH

      - httpApi:
          method: 'GET'
          path: /api/v1/group/{group}/counter/{id}
          authorizer: APIAUTH

      - httpApi:
          method: 'POST'
          path: /api/v1/group/{group}/counter/{name}
          authorizer: APIAUTH

      - httpApi:
          method: 'POST'
          path: /api/v1/group/{group}/counter/{id}/increment
          authorizer: APIAUTH

      - httpApi:
          method: 'POST'
          path: /api/v1/group/{group}/counter/{id}/decrement
          authorizer: APIAUTH

      - httpApi:
          method: 'POST'
          path: /api/v1/group/{group}/counter/{id}/reset
          authorizer: APIAUTH

      - httpApi:
          method: 'POST'
          path: /api/v1/group/{group}/counter/{id}/step
          authorizer: APIAUTH

      - httpApi:
          method: 'DELETE'
          path: /api/v1/group/{group}/counter/{id}
          authorizer: APIAUTH





resources:
  Resources:
    counterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: counterUUID
            AttributeType: S
        KeySchema:
          - AttributeName: counterUUID
            KeyType:  HASH     
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    groupTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupUUID
            AttributeType: S
        KeySchema:
          - AttributeName: groupUUID
            KeyType:  HASH     
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userUUID
            AttributeType: S
          - AttributeName: userEmail
            AttributeType: S
        KeySchema:
          - AttributeName: userUUID
            KeyType:  HASH
        GlobalSecondaryIndexes:
          - IndexName: emailLookup
            KeySchema:
              - AttributeName: userEmail
                KeyType:  HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true           
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: 
          Ref: UserPool
        Domain: 
          Fn::Join:
            - '-'
            - - Ref: HttpApi
              - Ref: UserPoolClient
